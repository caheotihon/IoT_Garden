"""
Temperature Alert System - Discord Notifications
Theo d√µi nhi·ªát ƒë·ªô T·ª™ MQTT v√† g·ª≠i c·∫£nh b√°o qua Discord khi v∆∞·ª£t ng∆∞·ª°ng
(Phi√™n b·∫£n c·∫≠p nh·∫≠t, c√≥ th√™m tr·∫°ng th√°i M∆ØA)
"""

import json
import time
from datetime import datetime
import paho.mqtt.client as mqtt
import requests

# =============================================================================
# CONFIGURATION
# =============================================================================

# MQTT Configuration
MQTT_BROKER = "192.168.1.9" 
MQTT_PORT = 1883
MQTT_USERNAME = ""
MQTT_PASSWORD = ""
TOPIC_SENSOR = "demo/garden/sensor/state"

# Discord Webhook Configuration
DISCORD_WEBHOOK_URL = "https://discord.com/api/webhooks/1424942108313129005/24l_Jies7HOFm0e283fWE47QJYvNm9uWC5-g3-gKmyub7KuZmcT4rd62km-G2Klkykco"

# Alert Configuration
TEMP_THRESHOLD = 30.0  # Ng∆∞·ª°ng nhi·ªát ƒë·ªô (¬∞C)
ALERT_COOLDOWN = 300   # Th·ªùi gian ch·ªù gi·ªØa c√°c c·∫£nh b√°o (5 ph√∫t = 300 gi√¢y)

# =============================================================================
# GLOBAL VARIABLES
# =============================================================================

last_alert_time = 0
alert_active = False

# =============================================================================
# DISCORD FUNCTIONS
# =============================================================================

# <<< S·ª¨A: Th√™m 'is_raining' v√†o h√†m
def send_discord_alert(temperature, humidity, rssi, is_raining):
    """G·ª≠i c·∫£nh b√°o l√™n Discord"""
    global last_alert_time
    
    current_time = time.time()
    
    if current_time - last_alert_time < ALERT_COOLDOWN:
        print(f"‚è≥ Cooldown active, skipping alert (wait {ALERT_COOLDOWN - (current_time - last_alert_time):.0f}s)")
        return
    
    # <<< S·ª¨A: Th√™m logic cho tr·∫°ng th√°i m∆∞a
    rain_status_str = "üåßÔ∏è ƒêang m∆∞a" if is_raining else "‚òÄÔ∏è Kh√¥ r√°o"
    
    embed = {
        "title": "üö® C·∫¢NH B√ÅO NHI·ªÜT ƒê·ªò CAO (V∆Ø·ªúN)",
        "description": f"‚ö†Ô∏è Nhi·ªát ƒë·ªô v∆∞·ª£t ng∆∞·ª°ng **{TEMP_THRESHOLD}¬∞C**",
        "color": 16711680,  # M√†u ƒë·ªè
        "fields": [
            {
                "name": "üå°Ô∏è Nhi·ªát ƒë·ªô hi·ªán t·∫°i",
                "value": f"**{temperature}¬∞C**",
                "inline": True
            },
            {
                "name": "üíß ƒê·ªô ·∫©m",
                "value": f"{humidity}%",
                "inline": True
            },
            # <<< S·ª¨A: Th√™m tr∆∞·ªùng T√¨nh tr·∫°ng m∆∞a
            {
                "name": "üåßÔ∏è T√¨nh tr·∫°ng m∆∞a",
                "value": f"**{rain_status_str}**",
                "inline": True
            },
            {
                "name": "üì∂ T√≠n hi·ªáu",
                "value": f"{rssi} dBm",
                "inline": True # S·∫Ω t·ª± ƒë·ªông xu·ªëng d√≤ng m·ªõi
            },
            {
                "name": "‚è∞ Th·ªùi gian",
                "value": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "inline": False
            }
        ],
        "footer": { "text": "IoT Garden Alert System" },
        "timestamp": datetime.utcnow().isoformat()
    }
    
    payload = {
        "username": "IoT Garden Bot",
        "avatar_url": "https://cdn-icons-png.flaticon.com/512/3093/3093173.png",
        "embeds": [embed]
    }
    
    try:
        response = requests.post(DISCORD_WEBHOOK_URL, json=payload)
        
        if response.status_code == 204:
            print(f"‚úÖ Discord alert sent: {temperature}¬∞C")
            last_alert_time = current_time
        else:
            print(f"‚ùå Failed to send Discord alert: {response.status_code}")
            print(f"   Response: {response.text}")
    
    except Exception as e:
        print(f"‚ùå Error sending Discord alert: {e}")

# <<< S·ª¨A: Th√™m 'is_raining' v√†o h√†m
def send_discord_normal(temperature, humidity, is_raining):
    """G·ª≠i th√¥ng b√°o nhi·ªát ƒë·ªô ƒë√£ tr·ªü v·ªÅ b√¨nh th∆∞·ªùng"""
    
    # <<< S·ª¨A: Th√™m logic cho tr·∫°ng th√°i m∆∞a
    rain_status_str = "üåßÔ∏è ƒêang m∆∞a" if is_raining else "‚òÄÔ∏è Kh√¥ r√°o"

    embed = {
        "title": "‚úÖ NHI·ªÜT ƒê·ªò TR·ªû V·ªÄ B√åNH TH∆Ø·ªúNG (V∆Ø·ªúN)",
        "description": f"Nhi·ªát ƒë·ªô hi·ªán t·∫°i d∆∞·ªõi ng∆∞·ª°ng {TEMP_THRESHOLD}¬∞C",
        "color": 65280,  # M√†u xanh l√°
        "fields": [
            {
                "name": "üå°Ô∏è Nhi·ªát ƒë·ªô hi·ªán t·∫°i",
                "value": f"**{temperature}¬∞C**",
                "inline": True
            },
            {
                "name": "üíß ƒê·ªô ·∫©m",
                "value": f"{humidity}%",
                "inline": True
            },
            # <<< S·ª¨A: Th√™m tr∆∞·ªùng T√¨nh tr·∫°ng m∆∞a
            {
                "name": "üåßÔ∏è T√¨nh tr·∫°ng m∆∞a",
                "value": f"{rain_status_str}",
                "inline": True
            },
            {
                "name": "‚è∞ Th·ªùi gian",
                "value": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "inline": False
            }
        ],
        "footer": { "text": "IoT Garden Alert System" },
        "timestamp": datetime.utcnow().isoformat()
    }
    
    payload = {
        "username": "IoT Garden Bot",
        "avatar_url": "https://cdn-icons-png.flaticon.com/512/3093/3093173.png",
        "embeds": [embed]
    }
    
    try:
        response = requests.post(DISCORD_WEBHOOK_URL, json=payload)
        
        if response.status_code == 204:
            print(f"‚úÖ Discord normal notification sent: {temperature}¬∞C")
        else:
            print(f"‚ùå Failed to send Discord notification: {response.status_code}")
    
    except Exception as e:
        print(f"‚ùå Error sending Discord notification: {e}")

# =============================================================================
# MQTT CALLBACKS
# =============================================================================

def on_connect(client, userdata, flags, rc):
    """Callback khi k·∫øt n·ªëi MQTT th√†nh c√¥ng"""
    if rc == 0:
        print("‚úÖ Connected to MQTT broker: " + MQTT_BROKER)
        client.subscribe(TOPIC_SENSOR)
        print(f"üì° Subscribed to: {TOPIC_SENSOR}")
        print(f"üå°Ô∏è  Monitoring temperature threshold: {TEMP_THRESHOLD}¬∞C")
        print(f"‚è±Ô∏è  Alert cooldown: {ALERT_COOLDOWN} seconds")
    else:
        print(f"‚ùå Connection failed with code: {rc}")

def on_message(client, userdata, msg):
    """Callback khi nh·∫≠n ƒë∆∞·ª£c message t·ª´ MQTT"""
    global alert_active
    
    try:
        data = json.loads(msg.payload.decode())
        
        temperature = data.get('temperature')
        humidity = data.get('humidity')
        rssi = data.get('rssi')
        is_raining = data.get('is_raining') # <<< S·ª¨A: ƒê·ªçc th√™m tr·∫°ng th√°i m∆∞a
        
        # <<< S·ª¨A: Ki·ªÉm tra c·∫£ 2 gi√° tr·ªã
        if temperature is None or is_raining is None:
            print(" ‚Üí ‚ö†Ô∏è Missing temp or rain data, skipping")
            return
        
        rain_status_str = "Raining" if is_raining else "Dry"
        print(f"üå°Ô∏è  Current: {temperature}¬∞C, {humidity}%, {rssi}dBm, Rain: {rain_status_str}", end="")
        
        if temperature > TEMP_THRESHOLD:
            print(f" ‚Üí üö® HIGH TEMPERATURE!")
            if not alert_active:
                # <<< S·ª¨A: Truy·ªÅn 'is_raining'
                send_discord_alert(temperature, humidity, rssi, is_raining)
                alert_active = True
            else:
                # V·∫´n ki·ªÉm tra cooldown
                send_discord_alert(temperature, humidity, rssi, is_raining)
        else:
            print(f" ‚Üí ‚úÖ Normal")
            if alert_active:
                # <<< S·ª¨A: Truy·ªÅn 'is_raining'
                send_discord_normal(temperature, humidity, is_raining)
                alert_active = False
                global last_alert_time
                last_alert_time = 0 
    
    except json.JSONDecodeError:
        print(f"‚ö†Ô∏è  Invalid JSON: {msg.payload.decode()}")
    except Exception as e:
        print(f"‚ùå Error processing message: {e}")

# =============================================================================
# MAIN
# =============================================================================

def main():
    print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë   Temperature Alert System (Garden)        ‚ïë")
    print("‚ïë   Discord Notifications (Rain Enabled)     ‚ïë") # <<< S·ª¨A
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
    print(f"üì° MQTT Broker: {MQTT_BROKER}:{MQTT_PORT}")
    print(f"üîî Discord Webhook: Configured")
    print(f"üå°Ô∏è  Temperature Threshold: {TEMP_THRESHOLD}¬∞C")
    print(f"‚è±Ô∏è  Alert Cooldown: {ALERT_COOLDOWN} seconds")
    print("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
    
    # Test Discord webhook
    print("\nüß™ Testing Discord webhook...")
    test_embed = {
        "title": "üöÄ Garden Alert System Started",
        "description": f"Temperature & Rain monitoring active with threshold: **{TEMP_THRESHOLD}¬∞C**", # <<< S·ª¨A
        "color": 3447003,  # M√†u xanh d∆∞∆°ng
        "fields": [
            { "name": "Status", "value": "‚úÖ Online", "inline": True },
            { "name": "MQTT Broker", "value": f"{MQTT_BROKER}:{MQTT_PORT}", "inline": True }
        ],
        "footer": { "text": "IoT Garden Alert System" },
        "timestamp": datetime.utcnow().isoformat()
    }
    
    test_payload = {
        "username": "IoT Garden Bot",
        "avatar_url": "https://cdn-icons-png.flaticon.com/512/3093/3093173.png",
        "embeds": [test_embed]
    }
    
    try:
        response = requests.post(DISCORD_WEBHOOK_URL, json=test_payload)
        if response.status_code == 204:
            print("‚úÖ Discord webhook test successful!")
        else:
            print(f"‚ö†Ô∏è  Discord webhook test failed: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Discord webhook test error: {e}")
    
    print("\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
    
    client = mqtt.Client(client_id="temp_alert_" + str(int(time.time())), protocol=mqtt.MQTTv311)
    client.on_connect = on_connect
    client.on_message = on_message
    
    try:
        if MQTT_USERNAME:
            client.username_pw_set(MQTT_USERNAME, MQTT_PASSWORD)
        
        client.connect(MQTT_BROKER, MQTT_PORT, 60)
        
        print("\n‚úÖ Alert system started! Press Ctrl+C to stop")
        print("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n")
        
        client.loop_forever()
        
    except KeyboardInterrupt:
        print("\n\nüõë Alert system stopped by user")
        client.disconnect()
    except Exception as e:
        print(f"‚ùå Error: {e}")

if __name__ == "__main__":
    main()